using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DotNEToolkit.Media
{
    /// <summary>
    /// 提供G711数据编解码函数
    /// 
    /// https://www.jianshu.com/p/33cba1a821d0
    /// g711a输入的是13位（S16的高13位），这种格式是经过特别设计的，便于数字设备进行快速运算。
    /// G711的内容是将14bit(uLaw)或者13bit(aLaw)采样的PCM数据编码成8bit的数据流，播放的时候在将此8bit的数据还原成14bit或者13bit进行播放，不同于MPEG这种对于整体或者一段数据进行考虑再进行编解码的做法，G711是波形编解码算法，就是一个sample对应一个编码，所以压缩比固定为：
    /// 8/14 = 57% (uLaw)
    /// 8/13 = 62% (aLaw)
    /// </summary>
    public static class G711
    {
        private static short[] alaw2short =
        {
            -5504, -5248, -6016, -5760, -4480, -4224, -4992, -4736,
            -7552, -7296, -8064, -7808, -6528, -6272, -7040, -6784,
            -2752, -2624, -3008, -2880, -2240, -2112, -2496, -2368,
            -3776, -3648, -4032, -3904, -3264, -3136, -3520, -3392,
            -22016, -20992, -24064, -23040, -17920, -16896, -19968,
            -18944, -30208, -29184, -32256, -31232, -26112, -25088,
            -28160, -27136, -11008, -10496, -12032, -11520, -8960,
            -8448, -9984, -9472, -15104, -14592, -16128, -15616, -13056,
            -12544, -14080, -13568, -344, -328, -376, -360, -280, -264, -312,
            -296, -472, -456, -504, -488, -408, -392, -440, -424, -88, -72,
            -120, -104, -24, -8, -56, -40, -216, -200, -248, -232, -152, -136,
            -184, -168, -1376, -1312, -1504, -1440, -1120, -1056, -1248, -1184,
            -1888, -1824, -2016, -1952, -1632, -1568, -1760, -1696, -688, -656,
            -752, -720, -560, -528, -624, -592, -944, -912, -1008, -976, -816,
            -784, -880, -848, 5504, 5248, 6016, 5760, 4480, 4224, 4992, 4736,
            7552, 7296, 8064, 7808, 6528, 6272, 7040, 6784, 2752, 2624, 3008,
            2880, 2240, 2112, 2496, 2368, 3776, 3648, 4032, 3904, 3264, 3136,
            3520, 3392, 22016, 20992, 24064, 23040, 17920, 16896, 19968, 18944,
            30208, 29184, 32256, 31232, 26112, 25088, 28160, 27136, 11008,
            10496, 12032, 11520, 8960, 8448, 9984, 9472, 15104, 14592, 16128,
            15616, 13056, 12544, 14080, 13568, 344, 328, 376, 360, 280, 264,
            312, 296, 472, 456, 504, 488, 408, 392, 440, 424, 88, 72, 120, 104,
            24, 8, 56, 40, 216, 200, 248, 232, 152, 136, 184, 168, 1376, 1312,
            1504, 1440, 1120, 1056, 1248, 1184, 1888, 1824, 2016, 1952, 1632,
            1568, 1760, 1696, 688, 656, 752, 720, 560, 528, 624, 592, 944, 912,
            1008, 976, 816, 784, 880, 848
        };

        private static short[] ulaw2short =
        {
             -32124, -31100, -30076, -29052, -28028, -27004, -25980, -24956,
             -23932, -22908, -21884, -20860, -19836, -18812, -17788, -16764,
             -15996, -15484, -14972, -14460, -13948, -13436, -12924, -12412,
             -11900, -11388, -10876, -10364,  -9852,  -9340,  -8828,  -8316,
              -7932,  -7676,  -7420,  -7164,  -6908,  -6652,  -6396,  -6140,
              -5884,  -5628,  -5372,  -5116,  -4860,  -4604,  -4348,  -4092,
              -3900,  -3772,  -3644,  -3516,  -3388,  -3260,  -3132,  -3004,
              -2876,  -2748,  -2620,  -2492,  -2364,  -2236,  -2108,  -1980,
              -1884,  -1820,  -1756,  -1692,  -1628,  -1564,  -1500,  -1436,
              -1372,  -1308,  -1244,  -1180,  -1116,  -1052,   -988,   -924,
               -876,   -844,   -812,   -780,   -748,   -716,   -684,   -652,
               -620,   -588,   -556,   -524,   -492,   -460,   -428,   -396,
               -372,   -356,   -340,   -324,   -308,   -292,   -276,   -260,
               -244,   -228,   -212,   -196,   -180,   -164,   -148,   -132,
               -120,   -112,   -104,    -96,    -88,    -80,    -72,    -64,
                -56,    -48,    -40,    -32,    -24,    -16,     -8,      0,
              32124,  31100,  30076,  29052,  28028,  27004,  25980,  24956,
              23932,  22908,  21884,  20860,  19836,  18812,  17788,  16764,
              15996,  15484,  14972,  14460,  13948,  13436,  12924,  12412,
              11900,  11388,  10876,  10364,   9852,   9340,   8828,   8316,
               7932,   7676,   7420,   7164,   6908,   6652,   6396,   6140,
               5884,   5628,   5372,   5116,   4860,   4604,   4348,   4092,
               3900,   3772,   3644,   3516,   3388,   3260,   3132,   3004,
               2876,   2748,   2620,   2492,   2364,   2236,   2108,   1980,
               1884,   1820,   1756,   1692,   1628,   1564,   1500,   1436,
               1372,   1308,   1244,   1180,   1116,   1052,    988,    924,
                876,    844,    812,    780,    748,    716,    684,    652,
                620,    588,    556,    524,    492,    460,    428,    396,
                372,    356,    340,    324,    308,    292,    276,    260,
                244,    228,    212,    196,    180,    164,    148,    132,
                120,    112,    104,     96,     88,     80,     72,     64,
                 56,     48,     40,     32,     24,     16,      8,      0
        };

        /// <summary>
        /// alaw转PCM
        /// </summary>
        /// <param name="alaw">G711数据</param>
        /// <param name="size">要解码的字节数</param>
        /// <returns></returns>
        public static byte[] Alaw2PCM(byte[] alaw, int size)
        {
            byte[] pcm = new byte[size * 2];

            int j = 0;
            for (int i = 0; i < size; i++)
            {
                short s = alaw2short[alaw[i] & 0xFF];
                pcm[j++] = (byte)s;
                pcm[j++] = (byte)(s >> 8);
            }

            return pcm;
        }

        /// <summary>
        /// ulaw转PCM
        /// </summary>
        /// <param name="ulaw"></param>
        /// <returns></returns>
        public static byte[] Ulaw2PCM(byte[] ulaw, int size)
        {
            byte[] pcm = new byte[ulaw.Length * 2];

            int j = 0;
            for (int i = 0; i < ulaw.Length; i++)
            {
                short s = ulaw2short[ulaw[i] & 0xFF];
                pcm[j++] = (byte)s;
                pcm[j++] = (byte)(s >> 8);
            }

            return pcm;
        }
    }
}
